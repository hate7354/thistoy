<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"
	xmlns:mvc="http://www.springframework.org/schema/mvc">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/**" location="/resources/" />

	<!-- NaverLoginBO Class에 대한 Bean설정 추가 네이버 네아로관련 -->
	<beans:bean id="naverLoginBO"
		class="com.test.tst.NaverLoginBO" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 파일업로드 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="utf-8"></beans:property>
		<!-- 1024 * 1024 * 10 bytes 10MB -->
		<beans:property name="maxUploadSize" value="104857560"></beans:property>
		<!-- 1024 * 1024 * 2 bytes 2MB -->
		<beans:property name="maxUploadSizePerFile"
			value="2097152"></beans:property>
		<beans:property name="maxInMemorySize" value="10485756"></beans:property>
	</beans:bean>
	<!-- web과 관련된 애들만 servlet-context에서 빈생성 -->
	<context:component-scan
		base-package="com.test.tst" />
	<context:component-scan
		base-package="com.base.controller" />

	<!-- <beans:bean id="loginInterceptor" -->
	<!-- class="com.security.interceptor.LoginInterceptor" ></beans:bean> -->
	<!-- <mvc:interceptors> -->
	<!-- <mvc:interceptor> -->
	<!-- <mapping path="/login" /> -->
	<!-- <beans:ref bean="loginInterceptor" /> -->
	<!-- </mvc:interceptor> -->
	<!-- </mvc:interceptors> -->


	<!-- interceptor 는 등록된 순서대로 순차적으로 실행 된다 -->
	<!-- <mvc:interceptors> -->
	<!-- 세션이 있는지 검사하는 인터셉터 -->
	<!-- <mvc:interceptor> -->
	<!-- 세션에 있어야 되는 페이지 -->
	<!-- <mvc:mapping path="/*" /> -->
	<!-- 세션 검사를 하지 않는 페이지 -->
	<!-- exclude-mapping 는 spring 3.2 이상에서 사용 가능하므로 spring-mvc-4.3.xsd 를 수정해주어야 
		합니다. -->
	<!-- <mvc:exclude-mapping path="/home" /> -->
	<!-- <mvc:exclude-mapping path="/login" /> -->
	<!-- <mvc:exclude-mapping path="/loginInterceptor" /> -->
	<!-- <mvc:exclude-mapping path="/req/*" /> -->
	<!-- <beans:bean -->
	<!-- class="com.security.interceptor.LoginInterceptor" /> -->
	<!-- </mvc:interceptor> -->
	<!-- 로그인을 처리하는 인터셉터 - 구지 안해도 된다. 다만 인터셉터 2개인 경우의예를 위해서. -->
	<!-- <mvc:interceptor> -->
	<!-- path 에 있는 서블릿이 호출될때 ref 에 참조되어 있는 interceprot 를 샐행하여 세션을 관리한다. -->
	<!-- <mvc:mapping path="/loginInterceptor" /> -->
	<!-- <beans:bean class="com.security.interceptor.LoginInterceptor" /> -->
	<!-- </mvc:interceptor> -->
	<!-- </mvc:interceptors> -->

</beans:beans>